<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>代币发布流程</title>
      <link href="/2019/07/01/%E4%BB%A3%E5%B8%81%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/07/01/%E4%BB%A3%E5%B8%81%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="以太坊私有链上基于ERC20标准发布代币"><a href="#以太坊私有链上基于ERC20标准发布代币" class="headerlink" title="以太坊私有链上基于ERC20标准发布代币"></a><strong><center>以太坊私有链上基于ERC20标准发布代币</center></strong></h1><a id="more"></a><h2 id="1-Go环境安装"><a href="#1-Go环境安装" class="headerlink" title="1.Go环境安装"></a>1.<strong>Go环境安装</strong></h2><h2 id="2-Geth客户端安装"><a href="#2-Geth客户端安装" class="headerlink" title="2.Geth客户端安装"></a>2.<strong>Geth客户端安装</strong></h2><h2 id="3-Ethereum钱包安装"><a href="#3-Ethereum钱包安装" class="headerlink" title="3.Ethereum钱包安装"></a>3.<strong>Ethereum钱包安装</strong></h2><h2 id="4-钱包连接私有链"><a href="#4-钱包连接私有链" class="headerlink" title="4.钱包连接私有链"></a>4.<strong>钱包连接私有链</strong></h2><h3 id="就是在终端输入下面的命令，给钱包一个rpc参数，就是通过终端启动钱包，并提供参数-geth-ipc文件就是你启动完节点后，自动生成的，就在节点目录下，钱包连接到私有链需要提供这个文件，否则会连接到主链上"><a href="#就是在终端输入下面的命令，给钱包一个rpc参数，就是通过终端启动钱包，并提供参数-geth-ipc文件就是你启动完节点后，自动生成的，就在节点目录下，钱包连接到私有链需要提供这个文件，否则会连接到主链上" class="headerlink" title="就是在终端输入下面的命令，给钱包一个rpc参数，就是通过终端启动钱包，并提供参数(geth.ipc文件就是你启动完节点后，自动生成的，就在节点目录下，钱包连接到私有链需要提供这个文件，否则会连接到主链上."></a><strong>就是在终端输入下面的命令，给钱包一个rpc参数，就是通过终端启动钱包，并提供参数(geth.ipc文件就是你启动完节点后，自动生成的，就在节点目录下，钱包连接到私有链需要提供这个文件，否则会连接到主链上.</strong></h3><pre><code>&quot;C:\Program Files\Ethereum-Wallet\Ethereum Wallet.exe&quot; --rpc &quot;\\.\pipe\geth.ipc&quot;</code></pre><h3 id="接下来等待钱包同步区块-同步完成后即可使用"><a href="#接下来等待钱包同步区块-同步完成后即可使用" class="headerlink" title="接下来等待钱包同步区块,同步完成后即可使用."></a><strong>接下来等待钱包同步区块,同步完成后即可使用.</strong></h3><p><img src="/images/pasted-0.png" alt="upload successful"></p><h2 id="5-创建代币"><a href="#5-创建代币" class="headerlink" title="5.创建代币"></a>5.<strong>创建代币</strong></h2><h3 id="打开钱包点击上方的合约按钮-CONTRACTS-，然后点击部署新合约-DEPLOY-NEW-CONTRACT-将以下代码拷贝到SOLIDITY-CONTRACT-SOURCE-CODE编辑框中"><a href="#打开钱包点击上方的合约按钮-CONTRACTS-，然后点击部署新合约-DEPLOY-NEW-CONTRACT-将以下代码拷贝到SOLIDITY-CONTRACT-SOURCE-CODE编辑框中" class="headerlink" title="打开钱包点击上方的合约按钮(CONTRACTS)，然后点击部署新合约(DEPLOY NEW CONTRACT)将以下代码拷贝到SOLIDITY CONTRACT SOURCE CODE编辑框中"></a><strong>打开钱包点击上方的合约按钮(CONTRACTS)，然后点击部署新合约(DEPLOY NEW CONTRACT)将以下代码拷贝到SOLIDITY CONTRACT SOURCE CODE编辑框中</strong></h3><p><img src="/images/pasted-1.png" alt="upload successful"></p><pre><code>pragma solidity ^0.4.16;interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }contract TokenERC20 {// Public variables of the tokenstring public name;string public symbol;uint8 public decimals = 18;// 18 decimals is the strongly suggested default, avoid changing ituint256 public totalSupply; // This creates an array with all balancesmapping (address =&gt; uint256) public balanceOf;mapping (address =&gt; mapping (address =&gt; uint256)) public allowance;// This generates a public event on the blockchain that will notify clientsevent Transfer(address indexed from, address indexed to, uint256 value);// This notifies clients about the amount burntevent Burn(address indexed from, uint256 value);/** * Constrctor function * * Initializes contract with initial supply tokens to the creator of the contract */function TokenERC20(    uint256 initialSupply,    string tokenName,    string tokenSymbol) public {    totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount    balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens    name = tokenName;                                   // Set the name for display purposes    symbol = tokenSymbol;                               // Set the symbol for display purposes}/** * Internal transfer, only can be called by this contract */function _transfer(address _from, address _to, uint _value) internal {    // Prevent transfer to 0x0 address. Use burn() instead    require(_to != 0x0);    // Check if the sender has enough    require(balanceOf[_from] &gt;= _value);    // Check for overflows    require(balanceOf[_to] + _value &gt; balanceOf[_to]);    // Save this for an assertion in the future    uint previousBalances = balanceOf[_from] + balanceOf[_to];    // Subtract from the sender    balanceOf[_from] -= _value;    // Add the same to the recipient    balanceOf[_to] += _value;    Transfer(_from, _to, _value);    // Asserts are used to use static analysis to find bugs in your code. They should never fail    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);}/** * Transfer tokens * * Send `_value` tokens to `_to` from your account * * @param _to The address of the recipient * @param _value the amount to send */function transfer(address _to, uint256 _value) public {    _transfer(msg.sender, _to, _value);}/** * Transfer tokens from other address * * Send `_value` tokens to `_to` on behalf of `_from` * * @param _from The address of the sender * @param _to The address of the recipient * @param _value the amount to send */function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {    require(_value &lt;= allowance[_from][msg.sender]);     // Check allowance    allowance[_from][msg.sender] -= _value;    _transfer(_from, _to, _value);    return true;}/** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens on your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */function approve(address _spender, uint256 _value) public    returns (bool success) {    allowance[msg.sender][_spender] = _value;    return true;}/** * Set allowance for other address and notify * * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it * * @param _spender The address authorized to spend * @param _value the max amount they can spend * @param _extraData some extra information to send to the approved contract */function approveAndCall(address _spender, uint256 _value, bytes _extraData)    public    returns (bool success) {    tokenRecipient spender = tokenRecipient(_spender);    if (approve(_spender, _value)) {        spender.receiveApproval(msg.sender, _value, this, _extraData);        return true;    }}/** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */function burn(uint256 _value) public returns (bool success) {    require(balanceOf[msg.sender] &gt;= _value);   // Check if the sender has enough    balanceOf[msg.sender] -= _value;            // Subtract from the sender    totalSupply -= _value;                      // Updates totalSupply    Burn(msg.sender, _value);    return true;}/** * Destroy tokens from other account * * Remove `_value` tokens from the system irreversibly on behalf of `_from`. * * @param _from the address of the sender * @param _value the amount of money to burn */function burnFrom(address _from, uint256 _value) public returns (bool success) {    require(balanceOf[_from] &gt;= _value);                // Check if the targeted balance is enough    require(_value &lt;= allowance[_from][msg.sender]);    // Check allowance    balanceOf[_from] -= _value;                         // Subtract from the targeted balance    allowance[_from][msg.sender] -= _value;             // Subtract from the sender&apos;s allowance    totalSupply -= _value;                              // Update totalSupply    Burn(_from, _value);    return true;}</code></pre><p>} </p><h3 id="接下来选择发币标准为Token-ERC-20"><a href="#接下来选择发币标准为Token-ERC-20" class="headerlink" title="接下来选择发币标准为Token ERC 20"></a><strong>接下来选择发币标准为Token ERC 20</strong></h3><p><img src="/images/pasted-2.png" alt="upload successful"></p><h3 id="之后会有三个输入框-填入对应信息-代币发行总量-代币名-代币简称"><a href="#之后会有三个输入框-填入对应信息-代币发行总量-代币名-代币简称" class="headerlink" title="之后会有三个输入框,填入对应信息(代币发行总量,代币名,代币简称)"></a><strong>之后会有三个输入框,填入对应信息(代币发行总量,代币名,代币简称)</strong></h3><p><img src="/images/pasted-3.png" alt="upload successful"></p><h3 id="接下来选择手续费"><a href="#接下来选择手续费" class="headerlink" title="接下来选择手续费"></a><strong>接下来选择手续费</strong></h3><h2 id="6-开启挖矿"><a href="#6-开启挖矿" class="headerlink" title="6.开启挖矿"></a>6.<strong>开启挖矿</strong></h2><h3 id="理自己的交易。有一个确认，你的交易就被处理了。挖矿完成后，再次点击合约-CONTRACTS-，看，代币做好了，200w个！"><a href="#理自己的交易。有一个确认，你的交易就被处理了。挖矿完成后，再次点击合约-CONTRACTS-，看，代币做好了，200w个！" class="headerlink" title="理自己的交易。有一个确认，你的交易就被处理了。挖矿完成后，再次点击合约(CONTRACTS)，看，代币做好了，200w个！"></a><strong>理自己的交易。有一个确认，你的交易就被处理了。挖矿完成后，再次点击合约(CONTRACTS)，看，代币做好了，200w个！</strong></h3><h2 id="7-转账"><a href="#7-转账" class="headerlink" title="7 .转账"></a>7 .<strong>转账</strong></h2><h3 id="点击钱包的发送-SEND-，输入另一个节点的地址，输入转账金额，先转它10w个，币太多，没办法。下面注意了，前面转账的时候，只有ETHER，现在多了个刚才创建的代币，毫不犹豫选择它-注意下，千万不要把主链上的以太币转到私有链的钱包地址，否则你的以太币就消失在茫茫区块链中了-。"><a href="#点击钱包的发送-SEND-，输入另一个节点的地址，输入转账金额，先转它10w个，币太多，没办法。下面注意了，前面转账的时候，只有ETHER，现在多了个刚才创建的代币，毫不犹豫选择它-注意下，千万不要把主链上的以太币转到私有链的钱包地址，否则你的以太币就消失在茫茫区块链中了-。" class="headerlink" title="点击钱包的发送(SEND)，输入另一个节点的地址，输入转账金额，先转它10w个，币太多，没办法。下面注意了，前面转账的时候，只有ETHER，现在多了个刚才创建的代币，毫不犹豫选择它(注意下，千万不要把主链上的以太币转到私有链的钱包地址，否则你的以太币就消失在茫茫区块链中了)。"></a><strong>点击钱包的发送(SEND)，输入另一个节点的地址，输入转账金额，先转它10w个，币太多，没办法。下面注意了，前面转账的时候，只有ETHER，现在多了个刚才创建的代币，毫不犹豫选择它(注意下，千万不要把主链上的以太币转到私有链的钱包地址，否则你的以太币就消失在茫茫区块链中了)。</strong></h3><p><img src="/images/pasted-4.png" alt="upload successful"></p><h3 id="至此发布代币成功"><a href="#至此发布代币成功" class="headerlink" title="至此发布代币成功!"></a><strong>至此发布代币成功!</strong></h3>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 以太坊 </tag>
            
            <tag> 虚拟货币 </tag>
            
            <tag> ICO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用HexoAdmin进行在线编辑</title>
      <link href="/2019/07/01/est070202/"/>
      <url>/2019/07/01/est070202/</url>
      
        <content type="html"><![CDATA[<p>使用 Hexo Admin 插件<br>Hexo Admin 是一个本地在线式文章管理器，可以用直观可视化的方式新建、编辑博客文章、page页面，添加标签、分类等，并且支持剪贴板粘贴图片（自动在source_images_目录中创建文件）<br><br>使用方法<br>在Hexo网站目录下，安装 Hexo Admin 插件npm install –save hexo-admin<br>启动本地服务器并打开管理界面，即可使用hexo server -d<br>打开<a href="http://localhost:4000/admin/进行编辑" target="_blank" rel="noopener">http://localhost:4000/admin/进行编辑</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test6.29</title>
      <link href="/2019/06/29/test6-29/"/>
      <url>/2019/06/29/test6-29/</url>
      
        <content type="html"><![CDATA[<p>2019年6月29日的测试</p><a id="more"></a><img src="/2019/06/29/test6-29/vm.png" width="234234234"><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程图</title>
      <link href="/2019/06/28/transfer/"/>
      <url>/2019/06/28/transfer/</url>
      
        <content type="html"><![CDATA[<p>以太坊转账流程<br>流程图</p><img src="/2019/06/28/transfer/transfer.jpg" width="123123123"><img src="/2019/06/28/transfer/vm.png" width="234234234">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>流程图</title>
      <link href="/2019/06/28/%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
      <url>/2019/06/28/%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>以太坊转账流程<br>流程图<br><img src="/transfer.jpg" alt="流程图"></p><img src="/2019/06/28/流程图/transfer.jpg" title="流程图">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ERC20</title>
      <link href="/2019/06/28/ERC20/"/>
      <url>/2019/06/28/ERC20/</url>
      
        <content type="html"><![CDATA[<p>ERC20的全名叫：Ethereum Request for Comments 20。最先是以太坊社区团体提出来的。大家可以把它看做是一份协议，当你想创建自己的代币时，你就必须要遵守这份协议，这样后期才会有更多的第三方应用对你发行的代币进行支持。<br>ERC20是一段代码，主要有6个功能，分别是名称，简写，以及可以支持的最大位数以及定义查询方法等等。从ERC20发币的开源代码可以看出，如果一旦你要发币，首先就是要确定名称，代币简称，总量，代币精确小数点后多少位等等。<br>ERC 20有两种转账方式，一种是收件方为一份合同，这种情况下用户必须使用approve+transferFrom的功能来进行代币转移；而另一种则是收件方为合同外账户（例如，钱包地址）的情况，用户需将代币通过transfer功能转出。<br>根据ERC20标准，代币传输应该被认为是一个事件，但是传递函数不允许对这笔交易进行处理，因为它是在没有任何预先检查的情况下增加了接收方的余额。如果接收方是一个智能合约并且使用传递函数来发送代币的话，那么合约无法识别交易时肯能会导致问题的出现。这将导致传递函数出现意外行为并产生不可预测的结果，即代币可能会丢失并永久冻结。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 区块链相关 </tag>
            
            <tag> 发币标准 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/06/28/hello-world/"/>
      <url>/2019/06/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
